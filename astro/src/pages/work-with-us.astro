---
import Layout from "../layouts/PageLayout.astro";
import Landing from "../components/workWithUs/Landing.astro";
import OurServicePromise from "../components/workWithUs/OurServicePromise.astro";
import Marquee from "../components/Marquee.astro";
import MarketingCampaign from "../components/MarketingCampaign.astro";
import LetsChat from "../components/LetsChat.astro";
import JoinTheConversation from "../components/JoinTheConversation.astro";
import Roadmap from "../components/workWithUs/Roadmap.astro";
import Faq from "../components/faq/faq.astro";
import { getFAQContent } from "../lib/api/faqContent";
import RoadmapScroll from "../components/workWithUs/RoadmapScroll.astro";

const faqData = await getFAQContent();
const seo = {
  // title: "Mimotype",
  // description: "Join us in shaping the future of the optoelectronics industry.",
  // image: "https://i.imgur.com/hev2VXn.png",
};
---

<Layout seo={seo}>
  <Landing />
  <div class="content-wrapper">
    <section class="section">
      <OurServicePromise />
    </section>
    <section class="section">
      <MarketingCampaign
        textColor="var(--primary-light)"
        accentColor="var(--color-green)"
        backgroundColor="var(--accent-blue-secondary)"
        marqueeTextColor="var(--accent-blue-secondary)"
        marqueeColor="var(--color-green)"
        statTextColor="var(--accent-blue-secondary)"
        statCircleColor="var(--color-green)"
      />
    </section>
    <section class="section"></section>
    <section class="section section-white">
      <Roadmap />
      <RoadmapScroll/>
    </section>
    <nav class="navbar">
      <p class="nav-item">Our services</p>
      <p class="nav-item">Why Fortnite?</p>
      <p class="nav-item">Projects</p>
      <p class="nav-item">Project Roadmap</p>
      <div class="nav-active"></div>
    </nav>
  </div>
  <div class="join-the-conversation">
    <div class="svg-wrapper">
      <div class="svg-wrapper-text">
        <JoinTheConversation color="var(--color-navy)" />
      </div>
      <svg
        class="separator"
        width="100%"
        height="349"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path id="separator"></path>
      </svg>
    </div>
    <LetsChat
      backgroundColor="var(--accent-lightblue)"
      textColor="var(--color-navy)"
    />
  </div>
  <Faq
    data={faqData}
    faqTitle="var(--color-navy)"
    textColor="var(--color-navy)"
    backgroundColor="var(--accent-lightblue)"
  />
</Layout>

<style lang="scss">
  .content-wrapper {
    position: relative;
  }
  .navbar {
    width: 75%;
    margin: 5rem auto;
    position: sticky;
    bottom: 3rem;
    z-index: 10;
    border-radius: 50px;
    background: #d6e8f2;
    display: grid;
    place-items: center;
    grid-template-columns: 1fr 1fr 1fr 1fr;

    .nav-item {
      position: relative;
      z-index: 2;
      border-radius: 50px;
      padding: 1.5rem 0.5rem;
      text-align: center;
      width: 100%;
      height: 100%;
      color: var(--accent-blue-secondary);
      cursor: pointer;
      font-family: "Hamburg-Bold";
      text-transform: uppercase;
    }
    .nav-item.active {
      color: var(--accent-lightblue);
      transition: var(--hover-transition);
    }

    .nav-active {
      border-radius: 50px;
      z-index: -1;
      position: absolute;
      height: 8px;
      bottom: 0;
      background-color: var(--accent-blue-secondary);
      border: 2px solid var(--accent-lightblue);
      width: 25%;
      left: 0;
      height: 100%;
      transition: all 0.3s ease-in-out;
    }
  }
  .section:not(.section-white) {
    background: var(--accent-blue-secondary);
  }
  .join-the-conversation {
    width: 100%;
    position: relative;
    .separator {
      // margin: 0 auto;
      // width: 150%;
    }

    .svg-wrapper {
      transform: translateY(5px);
      position: relative;

      .svg-wrapper-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
</style>

<script>
  import Lenis from "@studio-freight/lenis";
  import { inView } from "motion";

  const lenis = new Lenis({
    lerp: 0.075,
  });
  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // Page navbar logic
  const activeSection = document.querySelector(".nav-active");
  const navbarItems = document.querySelectorAll(".nav-item");
  const sections = document.querySelectorAll(".section");

  let isScrolling = false; // keep track of scrolling state

  const updateActiveSection = (leftPosition) => {
    activeSection.style.left = `${leftPosition}%`;
  };

  let activeContextItem = navbarItems[0]; // set the first context item as active
  activeContextItem.classList.add("active"); // add active class to the first context item

  sections.forEach((section, i) => {
    const contextItem = navbarItems[i];
    const leftPosition = i * (100 / sections.length);

    inView(section, () => {
      // don't run inView if scrollTo scrolling is active
      if (!isScrolling) {
        updateActiveSection(leftPosition); // Update active section position in context bar
        activeContextItem.classList.remove("active"); // Remove active class from previous active item and add it to the current item
        contextItem.classList.add("active");
        activeContextItem = contextItem; // Update active context item
      }
      return (leaveInfo) => console.log(leaveInfo); // Return a function to be called when the section is no longer in view
    });

    contextItem.addEventListener("click", function () {
      isScrolling = true;

      updateActiveSection(leftPosition); // Update active section position in context bar
      activeContextItem.classList.remove("active"); // Remove active class from previous active item and add it to the clicked item
      contextItem.classList.add("active");
      activeContextItem = contextItem; // Update active context item
      // Scroll to the clicked section
      lenis.scrollTo(section, {
        duration: 0.5,
        onComplete: () => {
          isScrolling = false;
        },
      });
    });
  });

  // LET'S CHAT svg animation
  const shapeStates = {
    initialShape: {
      color: "var(--accent-lightblue)",
      d: "M960 0C562.503 0 211.323 87.0731 0 220.149V349H1920V220.149C1708.68 87.0731 1357.5 0 960 0Z",
    },
    targetShape: {
      color: "var(--accent-lightblue)",
      d: "M 960 0 C 562.503 0 226 -1 -1 0 V 349 H 1920 V -1 C 1723 -1 1357.5 0 960 0 Z",
    },
  };

  import { interpolate } from "flubber";
  import { animate, scroll } from "motion";
  const path = document.getElementById("separator");
  const parent = document.querySelector(".join-the-conversation");

  let currentPath = shapeStates.initialShape;

  // set svg attributes to that of stateShapes
  path.setAttribute("fill", currentPath.color);
  path.setAttribute("d", currentPath.d);

  // toggle between shape states
  currentPath =
    currentPath === shapeStates.initialShape
      ? shapeStates.targetShape
      : shapeStates.initialShape;
  const mixshapeStates = interpolate(path.getAttribute("d"), currentPath.d);

  // animate on scroll
  scroll(
    animate((progress) => path.setAttribute("d", mixshapeStates(progress))),
    { target: parent, offset: ["0 0.5", "0.45 0.5"] }
  );
</script>
