---
import Layout from "../layouts/PageLayout.astro";
import Landing from "../components/workWithUs/Landing.astro";
import OurServicePromise from "../components/workWithUs/OurServicePromise.astro";
import Marquee from "../components/Marquee.astro";
import MarketingCampaign from "../components/MarketingCampaign.astro";
import LetsChat from "../components/LetsChat.astro";
import JoinTheConversation from "../components/JoinTheConversation.astro";
import Roadmap from "../components/workWithUs/Roadmap.astro";
import Faq from "../components/faq/faq.astro";
import { getFAQContent } from "../lib/api/faqContent";
import { getAllProjects } from "../lib/api/projects";
import RoadmapScroll from "../components/workWithUs/RoadmapScroll.astro";
import Projects from "../components/projects/projects.astro";

import { getRoadmapContent } from "../lib/api/roadmapContent";

const projectsData = await getAllProjects();
const faqData = await getFAQContent();
const roadmapData = await getRoadmapContent();

const seo = {
  // title: "Mimotype",
  // description: "Join us in shaping the future of the optoelectronics industry.",
  // image: "https://i.imgur.com/hev2VXn.png",
};
---

<Layout seo={seo}>
  <Landing />
  <div class="content-wrapper">
    <div id="ourservicepromise-section">
      <svg
        class="ourservicepromise-blob"
        width="1920"
        height="379"
        viewBox="0 0 1920 379"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path id="ourservicepromise-blob" fill="var(--accent-blue-secondary)"
        ></path>
      </svg>
      <section class="section">
        <OurServicePromise />
      </section>
    </div>
    <section class="section">
      <MarketingCampaign
        textColor="var(--primary-light)"
        accentColor="var(--color-green)"
        backgroundColor="var(--accent-blue-secondary)"
        marqueeTextColor="var(--accent-blue-secondary)"
        marqueeColor="var(--color-green)"
        statTextColor="var(--accent-blue-secondary)"
        statCircleColor="var(--color-green)"
      />
    </section>
    <section class="section" id="projects-section">
      <Projects
        data={projectsData}
        textColor="var(--primary-light)"
        backgroundColor="var(--accent-blue-secondary)"
      />
      <svg
        class="projects-blob"
        width="1920"
        height="271"
        viewBox="0 0 1920 271"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path id="projects-blob" fill="var(--accent-blue-secondary)"></path>
      </svg>
    </section>
    <section class="section section-white">
      <Roadmap />
      <RoadmapScroll data={roadmapData} />
    </section>
    <nav class="navbar">
      <p class="nav-item">Our services</p>
      <p class="nav-item">Why Fortnite?</p>
      <p class="nav-item">Projects</p>
      <p class="nav-item">Project Roadmap</p>
      <div class="nav-active"></div>
    </nav>
  </div>
  <div class="join-the-conversation">
    <div class="svg-wrapper">
      <div class="svg-wrapper-text">
        <JoinTheConversation color="var(--color-navy)" />
      </div>
      <svg
        class="separator"
        width="100%"
        height="349"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path id="separator"></path>
      </svg>
    </div>
    <LetsChat
      backgroundColor="var(--accent-lightblue)"
      textColor="var(--color-navy)"
    />
  </div>
  <Faq
    data={faqData}
    faqTitle="var(--color-navy)"
    textColor="var(--color-navy)"
    backgroundColor="var(--accent-lightblue)"
  />
</Layout>

<style lang="scss">
  #ourservicepromise-section,
  #projects-section {
    overflow: hidden;
    .projects-blob {
      transform: translateY(-0px);
    }

    .ourservicepromise-blob {
      transform: translateY(50px);
    }
  }

  .content-wrapper {
    position: relative;
  }

  .navbar {
    width: 75%;
    margin: 5rem auto;
    position: sticky;
    bottom: 3rem;
    z-index: 10;
    border-radius: 50px;
    background: #d6e8f2;
    display: grid;
    place-items: center;
    grid-template-columns: 1fr 1fr 1fr 1fr;

    .nav-item {
      position: relative;
      z-index: 2;
      border-radius: 50px;
      padding: 1.5rem 0.5rem;
      text-align: center;
      width: 100%;
      height: 100%;
      color: var(--accent-blue-secondary);
      cursor: pointer;
      font-family: "Hamburg-Bold";
      text-transform: uppercase;
    }
    .nav-item.active {
      color: var(--accent-lightblue);
      transition: var(--hover-transition);
    }

    .nav-active {
      border-radius: 50px;
      z-index: -1;
      position: absolute;
      height: 8px;
      bottom: 0;
      background-color: var(--accent-blue-secondary);
      border: 2px solid var(--accent-lightblue);
      width: 25%;
      left: 0;
      height: 100%;
      transition: all 0.3s ease-in-out;
    }
  }
  .section:not(.section-white, #ourservicepromise-section, #projects-section) {
    background: var(--accent-blue-secondary);
  }
  .join-the-conversation {
    width: 100%;
    position: relative;
    .separator {
      // margin: 0 auto;
      // width: 150%;
    }

    .svg-wrapper {
      transform: translateY(5px);
      position: relative;

      .svg-wrapper-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
</style>

<script>
  import { animate, inView, scroll } from "motion";
  import { interpolate } from "flubber";
  import Lenis from "@studio-freight/lenis";
  import { inView } from "motion";

  const lenis = new Lenis({
    lerp: 0.075,
  });
  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // Page navbar logic
  const activeSection = document.querySelector(".nav-active");
  const navbarItems = document.querySelectorAll(".nav-item");
  const sections = document.querySelectorAll(".section");

  let isScrolling = false; // keep track of scrolling state

  const updateActiveSection = (leftPosition) => {
    activeSection.style.left = `${leftPosition}%`;
  };

  let activeContextItem = navbarItems[0]; // set the first context item as active
  activeContextItem.classList.add("active"); // add active class to the first context item

  sections.forEach((section, i) => {
    const contextItem = navbarItems[i];
    const leftPosition = i * (100 / sections.length);

    inView(
      section,
      () => {
        // don't run inView if scrollTo scrolling is active
        if (!isScrolling) {
          updateActiveSection(leftPosition); // Update active section position in context bar
          activeContextItem.classList.remove("active"); // Remove active class from previous active item and add it to the current item
          contextItem.classList.add("active");
          activeContextItem = contextItem; // Update active context item
        }
        return (leaveInfo) => console.log(leaveInfo); // Return a function to be called when the section is no longer in view
      },
      { margin: "100px 0px 0px 0px" }
    );

    contextItem.addEventListener("click", function () {
      isScrolling = true;

      updateActiveSection(leftPosition); // Update active section position in context bar
      activeContextItem.classList.remove("active"); // Remove active class from previous active item and add it to the clicked item
      contextItem.classList.add("active");
      activeContextItem = contextItem; // Update active context item
      // Scroll to the clicked section
      lenis.scrollTo(section, {
        duration: 0.5,
        onComplete: () => {
          isScrolling = false;
        },
      });
    });
  });

  // LET'S CHAT svg animation
  // LET'S CHAT svg animation
  // LET'S CHAT svg animation
  const path = document.getElementById("separator");
  const parent = document.querySelector(".join-the-conversation");

  const shapeStates = {
    initialShape: {
      color: "var(--accent-lightblue)",
      d: "M960 0C562.503 0 211.323 87.0731 0 220.149V349H1920V220.149C1708.68 87.0731 1357.5 0 960 0Z",
    },
    targetShape: {
      color: "var(--accent-lightblue)",
      d: "M 960 0 C 562.503 0 226 -1 -1 0 V 349 H 1920 V -1 C 1723 -1 1357.5 0 960 0 Z",
    },
  };

  let currentPath = shapeStates.initialShape;

  // set svg attributes to that of stateShapes
  path.setAttribute("fill", currentPath.color);
  path.setAttribute("d", currentPath.d);

  // toggle between shape states
  currentPath =
    currentPath === shapeStates.initialShape
      ? shapeStates.targetShape
      : shapeStates.initialShape;
  const mixshapeStates = interpolate(path.getAttribute("d"), currentPath.d);

  scroll(
    animate((progress) => path.setAttribute("d", mixshapeStates(progress))),
    { target: parent, offset: ["0 0.5", "0.45 0.5"] }
  );

  // OURSERVICEPROMISE svg animation
  // OURSERVICEPROMISE svg animation
  // OURSERVICEPROMISE svg animation
  const path2 = document.getElementById("ourservicepromise-blob");
  const parent2 = document.getElementById("ourservicepromise-section");

  const shapeStates2 = {
    initialShape: {
      d: "M1920 267.019C1889.2 185.133 1836.2 106.146 1768.09 58.2543C1611.88 -43.0287 1339.87 14.8616 1106.96 32.2586C874.046 49.6557 678.735 26.4595 473.324 61.1537C267.014 95.7478 155.009 152.538 1.10064 267.719H0V268.519V379H1920V267.619",
    },
    targetShape: {
      d: "M1761.69 141.048C1563.88 30.9626 1306.87 44.2486 1081.66 54.9374C856.645 64.1279 662.235 70.6213 432.423 113.577C287.115 141.547 121.806 196.09 0 267.816V379H1920V267.816C1873.1 217.468 1819.99 173.015 1761.79 141.048H1761.69Z",
    },
  };

  let currentPath2 = shapeStates2.initialShape;

  // set svg attributes to that of stateShapes
  path2.setAttribute("d", currentPath2.d);

  // toggle between shape states
  currentPath2 =
    currentPath === shapeStates2.initialShape
      ? shapeStates2.targetShape
      : shapeStates2.initialShape;
  const mixshapeStates2 = interpolate(path.getAttribute("d"), currentPath2.d);

  scroll(({ y }) => path2.setAttribute("d", mixshapeStates2(y.progress)), {
    target: parent2,
    offset: ["0 0.5", "0.45 0.5"],
  });

  // PROJECTS svg animation
  // PROJECTS svg animation
  // PROJECTS svg animation
  const path3 = document.getElementById("projects-blob");
  const parent3 = document.getElementById("projects-section");

  const shapeStates3 = {
    initialShape: {
      d: "M1919.62 0.254799C1733.62 121.404 1390.31 198.731 1167.73 223.191C943.746 248.032 753.034 288.415 560.409 262.809C369.442 236.822 170.825 141.023 0 0H1920",
    },
    targetShape: {
      d: "M1920 0C1746.83 133.959 1616.3 168.109 1411.85 193.02C1205.76 217.601 996.214 179.657 752.099 156.561C509.465 133.794 211.029 114.492 0 0H1920Z",
    },
  };

  let currentPath3 = shapeStates3.initialShape;

  // set svg attributes to that of stateShapes
  path3.setAttribute("d", currentPath3.d);

  // toggle between shape states
  currentPath3 =
    currentPath3 === shapeStates3.initialShape
      ? shapeStates3.targetShape
      : shapeStates3.initialShape;
  const mixshapeStates3 = interpolate(path3.getAttribute("d"), currentPath3.d);

  scroll(({ y }) => path3.setAttribute("d", mixshapeStates3(y.progress)), {
    target: parent3,
    offset: ["0.5 0", "1 0.5"],
  });
</script>
