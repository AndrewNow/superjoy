---
const { text, primaryColor, secondaryColor, isSecondInstance } = Astro.props;
---

<div class="wrapper">
  <div class="loop-container">
    <div class={isSecondInstance ? "second-loop-item" : "loop-item"}>
      <h6>
        {" "}{text}{" "}
      </h6>
    </div>
    <div class={isSecondInstance ? "second-loop-item" : "loop-item"}>
      <h6>
        {" "}{text}{" "}
      </h6>
    </div>
  </div>
</div>

<style lang="scss" define:vars={{ primaryColor, secondaryColor }}>
  .wrapper {
    overflow: hidden;
    position: relative;
    display: flex;
    height: 85px;
    background: var(--secondaryColor);
    color: var(--primaryColor);
  }

  .loop-container {
    white-space: nowrap;
  }
  .loop-item,
  .second-loop-item {
    position: absolute;
    top: 50%;
    padding-right: 2.5rem;

    h6 {
      text-transform: uppercase;
      font-family: "Hamburg-Regular";
    }
  }
</style>

<script>
  // init lenis
  import Lenis from "@studio-freight/lenis";

  const lenis = new Lenis({
    lerp: 0.075,
  });

  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // if user is on mobile, disable the scroll direction effects
  function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  }

  class LoopingElement {
    constructor(element, currentTranslation, speed, lenis) {
      this.lenis = lenis;

      this.element = element;
      this.currentTranslation = currentTranslation;

      this.speed = speed;
      this.direction = true;
      this.scrollTop = 0;
      this.metric = 100;

      this.lerp = {
        current: this.currentTranslation,
        target: this.currentTranslation,
        factor: 0.2,
      };

      this.events();
      this.render();
    }

    events() {
      let lastScrollTop = 0;
      let scrollDelta = 0;

      const update = () => {
        // since lenis and this fn don't update at the same rate, track the delta to slow it down
        scrollDelta = this.scrollTop - lastScrollTop;
        lastScrollTop = this.scrollTop;

        if (scrollDelta > 0) {
          this.direction = true; // scroll right
          this.lerp.target += this.speed * 3;
        } else if (scrollDelta < 0) {
          this.direction = false; // scroll left
          this.lerp.target -= this.speed * 3;
        }
        requestAnimationFrame(update);
      };

      this.lenis.on("scroll", (e) => {
        this.scrollTop =
          window.pageYOffset || document.documentElement.scrollTop;
      });

      update();
    }

    lerpFunc(current, target, factor) {
      // lerp.current = how much we want to translate by
      this.lerp.current = current * (1 - factor) + target * factor;
    }

    goForward() {
      this.lerp.target += this.speed;
      // if lerp target goes off the screen
      if (this.lerp.target > this.metric) {
        this.lerp.current -= this.metric * 2;
        this.lerp.target -= this.metric * 2;
      }
    }

    goBackward() {
      this.lerp.target -= this.speed;
      if (this.lerp.target < -this.metric) {
        this.lerp.current -= -this.metric * 2;
        this.lerp.target -= -this.metric * 2;
      }
    }

    animate() {
      if (!isMobile()) {
        // Check if user is not on a mobile device
        this.direction ? this.goForward() : this.goBackward();
        this.lerpFunc(this.lerp.current, this.lerp.target, this.lerp.factor);
      }
      this.element.style.transform = `translate(${this.lerp.current}%, -50%)`;
    }

    render() {
      this.animate();
      window.requestAnimationFrame(() => this.render());
    }
  }

  // ideally swap w/ something more specific & specify individually
  let elements = document.querySelectorAll(".loop-item");
  let secondElements = document.querySelectorAll(".second-loop-item");

  new LoopingElement(elements[0], 0, 0.05, lenis);
  new LoopingElement(elements[1], -100, 0.05, lenis);

  if (
    (typeof secondElements !== "undefined" && secondElements !== null) ||
    secondElements !== false
  ) {
    new LoopingElement(secondElements[0], 0, 0.05, lenis);
    new LoopingElement(secondElements[1], -100, 0.05, lenis);
  }
</script>
