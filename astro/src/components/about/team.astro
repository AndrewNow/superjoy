---
import { Image } from "@astrojs/image/components";
const { data } = Astro.props;
---

<section class="bg" id="bg">
  <div class="inner">
    <h2>Founders</h2>
    <div class="flex-area">
      <div class="bio">
        <p>{data.founderBio}</p>
      </div>
      <div class="founder-wrapper" id="container1">
        <div class="founder">
          <div class="parallax-item">
            <Image
              class="founder-portrait"
              src={data.danielaImageUrl}
              quality={100}
              alt="Portrait of"
              width={330}
              height={330}
            />
            <div class="founder-blue-block left"></div>
            <div class="founder-blue-block right"></div>
          </div>
        </div>
        <div class="founder">
          <div class="parallax-item2">
            <Image
              class="founder-portrait"
              src={data.aliImageUrl}
              quality={100}
              alt="Portrait of"
              width={330}
              height={330}
            />
            <div class="founder-yellow-block top"></div>
            <div class="founder-yellow-block bottom"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="inner">
    <h2>Our Team</h2>
    <div class="team-flex">
      {
        data.teamMembers.map((member) => {
          return (
            <div class="member-wrapper">
              <div class="member-inner">
                <div class="member-image">
                  {member.portraitUrl ? (
                    <Image
                      src={member.portraitUrl}
                      alt={`Portrait of ${member.memberName}`}
                      width={70}
                      height={70}
                    />
                  ) : (
                    <div class="member-fallback">
                      <h6>{member.memberName.charAt(0)}</h6>
                    </div>
                  )}
                </div>
                <div class="member-text">
                  <h6>{member.memberName}</h6>
                  <small>{member.memberRole}</small>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</section>

<script>
  // parallax scroll
  import { animate, scroll } from "motion";
  const parent = document.getElementById("bg");

  const item = document.querySelector(".parallax-item");
  const item2 = document.querySelector(".parallax-item2");

  scroll(animate(item, { y: "30%" }), {
    target: parent,
    offset: ["0 0.5", "1 1"],
  });

  scroll(animate(item2, { y: "30%" }), {
    target: parent,
    offset: ["0 0.5", "1 1"],
  });

  // randomize placeholders
  const colorPairs = [
    {
      color: "var(--accent-orange)",
      backgroundColor: "var(--accent-green)",
    },
    {
      color: "var(--accent-green)",
      backgroundColor: "var(--accent-blue-secondary)",
    },
    {
      color: "var(--accent-pink)",
      backgroundColor: "var(--accent-blue-secondary)",
    },
    {
      color: "var(--accent-blue)",
      backgroundColor: "var(--accent-yellow)",
    },
  ];

  function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
  }

  document.addEventListener("DOMContentLoaded", () => {
    const memberFallbacks = document.querySelectorAll(".member-fallback");
    let lastColorPairIndex = -1;

    memberFallbacks.forEach((fallback) => {
      let colorPairIndex;

      do {
        colorPairIndex = getRandomInt(colorPairs.length);
      } while (colorPairIndex === lastColorPairIndex);

      const colorPair = colorPairs[colorPairIndex];
      fallback.style.color = colorPair.color;
      fallback.style.backgroundColor = colorPair.backgroundColor;

      lastColorPairIndex = colorPairIndex;
    });
  });
</script>

<style lang="scss">
  .bg {
    background: var(--primary-light);
    padding: 10rem 0;
  }
  .inner {
    width: var(--inner-width);
    margin: 0 auto;
    padding: 2.5rem 0;
    h2 {
      font-family: "Hamburg-Light";
      color: var(--primary-dark);
      text-transform: uppercase;
      line-height: 100%;
    }
  }

  .flex-area {
    display: flex;
    position: relative;
    color: var(--primary-dark);
    margin: 5rem auto;
    .bio {
      p {
        width: 90%;
      }
    }
    :nth-child(1) {
      flex-basis: 40%;
    }
    :nth-child(2) {
      flex-basis: 60%;
      // margin-left: 2rem;
    }
    .founder-wrapper {
      display: flex;
      flex-basis: 50%;
    }
    .founder {
      margin: 2rem;
      aspect-ratio: 1/1;
      height: 380px;
      width: auto;
      position: relative;
    }
    .founder-portrait {
      position: absolute;
      width: 85%;
      height: 85%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      border-radius: 100%;
      z-index: 5;
    }
    .founder-blue-block {
      background: var(--accent-blue-secondary);
      border-radius: 40px;
      height: 100%;
      width: 50%;
      position: absolute;
      top: 0;
    }
    .left {
      left: 0;
    }
    .right {
      right: 0;
    }
    .founder-yellow-block {
      background: var(--accent-yellow);
      border-radius: 40px;
      width: 100%;
      position: absolute;
    }
    .parallax-item,
    .parallax-item2 {
      position: relative;
      width: 100%;
      height: 100%;
    }
    .top {
      height: 40%;
      top: 0;
    }
    .bottom {
      height: 60%;
      bottom: 0;
    }
  }
  .team-flex {
    margin: 4rem auto;
    position: relative;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    gap: 2.5rem 1rem;
  }

  .member-wrapper {
    max-width: 100%;
    position: relative;
    border-radius: 50px;
    background: var(--primary-dark);
  }
  .member-inner {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem 2rem;
  }
  .member-image {
    position: relative;
    aspect-ratio: 1/1;
    height: 70px;
    width: auto;
    border-radius: 100%;
    background: var(--primary-light);
    display: grid;
    place-items: center;
    overflow: hidden;
  }
  .member-fallback {
    display: grid;
    place-items: center;
    // position: absolute;
    // top: 50%;
    width: 100%;
    height: 100%;
    line-height: 100%;
  }
  .member-text {
    margin: 0 1rem;
    display: flex;
    flex-direction: column;
    color: var(--accent-yellow);
    small {
      font-family: "Aktiv-Regular";
      white-space: nowrap;
    }
  }
</style>
