<div class="image-hover-cursor">
  <div class="image-hovered">
    <p class="image-hovered-content">View project</p>
  </div>
</div>

<style lang="scss">
  .image-hover-cursor {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2000;
    contain: layout style size;
    // ? may need to disable for link clicking
    pointer-events: none;

    &:before {
      // the cursor when not hovering an item
      content: "";
      position: absolute;
      top: -50px;
      left: -50px;
      display: block;
      width: 100px;
      height: 100px;
      transform: scale(0.2);
      background: red;
      border-radius: 50%;
    }

    .cursor-media {
      display: block;
      width: 350px;
      height: 350px;
      overflow: hidden;
      transform: scale(0);
      position: absolute;
      top: calc(-350px / 2);
      left: calc(-350px / 2);
      clip-path: url(#mask);
      -webkit-clip-path: url(#mask);

      .cursor-media-content {
        position: absolute;
      }
    }
    .image-hovered {
      display: grid;
      place-items: center;
      width: 200px;
      height: 200px;
      overflow: hidden;
      transform: scale(0);
      position: absolute;
      top: calc(-200px / 2);
      left: calc(-200px / 2);
      background: white;
      border-radius: 100%;

      .image-hovered-content {
        position: absolute;
      }
    }
  }
</style>

<script>
  import { lerp, getMousePos, getSiblings } from "../utils/helpers.js";
  import { animate, inView } from "motion";

  let mouse = { x: 0, y: 0 };
  window.addEventListener("mousemove", (e) => (mouse = getMousePos(e)));
  class ImageCursor {
    constructor(wrapper) {
      // this.cursor = document.createElement("div");
      this.cursor = wrapper.children[0];

      this.moveCursor = (e) => {
        const rect = wrapper.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        // console.log("cursor pos is", x, y);
        this.cursor.style.transform = `translate(${x}px, ${y}px)`;
      };

      wrapper.addEventListener("mouseenter", () => {
        document.body.style.cursor = "none";
        document.addEventListener("mousemove", this.moveCursor);
      });

      wrapper.addEventListener("mouseleave", () => {
        document.body.style.cursor = "default";
        document.removeEventListener("mousemove", this.moveCursor);
        // wrapper.removeChild(this.cursor);
      });
    }
  }

  window.addEventListener("DOMContentLoaded", () => {
    const imageWrappers = document.querySelectorAll(".image-wrapper");
    imageWrappers.forEach((imageWrapper) => {
      imageWrapper.addEventListener("mouseenter", () => {
        new ImageCursor(imageWrapper);
      });
    });
  });
</script>
