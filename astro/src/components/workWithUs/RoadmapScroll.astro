---
const { data } = Astro.props;
const roadmapData = data.roadmapData;

const numSlides = roadmapData.length;
const scrollContainerHeight = `calc(${numSlides} * 100vh)`;
---

<!-- <p id="debug"></p> -->
<div class="scroll-wrapper" id="scroll-wrapper">
  <div class="wrapper" id="scroll-content">
    {
      roadmapData.map((item, index) => {
        function formatNumber(num) {
          if (num < 10) {
            return "0" + (num + 1);
          } else {
            return num.toString() + 1;
          }
        }
        const projectIndex = formatNumber(index);

        return (
          <div class="roadmap-item">
            <div class="roadmap-item-header">
              <h6>{projectIndex}</h6>
              <h6>{item.duration}</h6>
            </div>
            <h4>{item.title}</h4>
            <p>{item.description}</p>
          </div>
        );
      })
    }
  </div>
</div>

<script>
  import { scroll, animate, timeline } from "motion";
  const scrollWrapper = document.getElementById("scroll-wrapper");
  const content = document.getElementById("scroll-content");
  const getAllSlides = document.querySelectorAll(".roadmap-item");

  const numSlides = getAllSlides.length;
  // to end the translation when the last slide is centered, remove one slide's worth of length
  // from 100% of the scroll content width.
  const translationRatio = (-100 * (numSlides - 1)) / numSlides;

  const sequence = [];

  getAllSlides.forEach((item, index) => {
    if (index === 0) {
      return;
    } else if (index === numSlides - 1) {
      // Last slide (end with full opacity)
      sequence.push([
        item,
        {
          opacity: [0.2, 1],
          y: [50, 0],
          scale: [0.8, 1],
          // rotateY: ["-180deg", 0],
        },
      ]);
    } else {
      // All other slides
      sequence.push([
        item,
        {
          opacity: [0.2, 1],
          y: [50, 0],
          scale: [0.8, 1],
          // rotateY: ["-180deg", 0, "180deg"],
        },
      ]);
    }
  });

  scroll(timeline(sequence), {
    target: scrollWrapper,
  });

  scroll(
    animate(content, {
      transform: ["translateX(0)", `translateX(${translationRatio}%)`],
    }),
    {
      target: scrollWrapper,
    }
  );

  // const debug = document.getElementById("debug");
  // scroll(({ y }) => (debug.innerHTML = y.progress), {
  //   target: scrollWrapper,
  // });
</script>

<style lang="scss" define:vars={{ numSlides, scrollContainerHeight }}>
  #debug {
    position: fixed;
    z-index: 2000;
    top: 10vh;
    left: 10vw;
    color: red;
  }
  .scroll-wrapper {
    contain: paint;
    height: var(--scrollContainerHeight);
    position: relative;
  }
  .wrapper {
    position: sticky;
    top: 0;
    height: 100vh;
    display: flex;
    align-items: center;
    width: var(--scrollContainerHeight);
    // margin: 0 calc(50vw - (var(--scrollContainerHeight) / var(--numSlides)) / 2); // center the first slide
    margin-left: calc(
      50vw - (var(--scrollContainerHeight) / var(--numSlides)) / 2
    ); // center the first slide
  }
  .roadmap-item {
    perspective: 1000px;
    transform-style: preserve-3d;
    // backface-visibility: hidden; // for back of card
    color: var(--primary-light);
    background: var(--accent-blue-secondary);
    border-radius: 40px;
    padding: 5rem 4rem;
    margin: 0 calc(var(--scrollContainerHeight) / var(--numSlides) * (0.25 / 2)); // margins are 25%/2 of slide width
    width: calc(
      (var(--scrollContainerHeight) / var(--numSlides)) * 0.75
    ); // width of the blue area = 75% of slide width

    height: 70%;
    // transform: translateY(-50%);
    transform: translateY(0%);
    position: relative;
    h4 {
      margin: 3rem 0;
      font-family: "Hamburg-Regular";
    }
  }

  .roadmap-item-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
  }
</style>
